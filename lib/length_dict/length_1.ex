defmodule LengthDict.Length1 do
  @length_1_length_dict %{'b' => ["b"], 'B' => ["B"], 't' => ["t"], 'p' => ["p"], 'j' => ["j"], 'G' => ["G"], 'D' => ["D"], 'o' => ["o"], 'Q' => ["Q"], 'C' => ["C"], 'd' => ["d"], 'l' => ["l"], 'e' => ["e"], 'X' => ["X"], 'O' => ["O"], 'f' => ["f"], 'h' => ["h"], 'Y' => ["Y"], 'E' => ["E"], 'J' => ["J"], 'n' => ["n"], 'H' => ["H"], 'r' => ["r"], 'g' => ["g"], 'm' => ["m"], 'w' => ["w"], 'z' => ["z"], 'I' => ["I"], 'q' => ["q"], 'S' => ["S"], 'M' => ["M"], 'N' => ["N"], 'A' => ["A"], 'F' => ["F"], 'V' => ["V"], 'K' => ["K"], 'x' => ["x"], 's' => ["s"], 'L' => ["L"], 'R' => ["R"], 'U' => ["U"], 'u' => ["u"], 'a' => ["a"], 'v' => ["v"], 'c' => ["c"], 'Z' => ["Z"], 'k' => ["k"], 'W' => ["W"], 'P' => ["P"], 'T' => [...], ...}
  
  def get(string_id) do
    @length_1_length_dict
    |> Map.get(string_id)
  end
end
